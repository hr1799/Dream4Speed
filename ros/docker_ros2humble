# 1. Test setup:
# docker run -it --rm --gpus all pytorch/pytorch:2.0.1-cuda11.7-cudnn8-runtime nvidia-smi
#
# If the above does not work, try adding the --privileged flag
# and changing the command to `sh -c 'ldconfig -v && nvidia-smi'`.
#
# 2. Start training:
# docker build -f  Dockerfile -t img . && \
# docker run -it --rm --gpus all -v $PWD:/workspace -u $(id -u):$(id -g) img \
#   sh xvfb_run.sh python3 dreamer.py \
#   --configs dmc_vision --task dmc_walker_walk \
#   --logdir "./logdir/dmc_walker_walk"
#
# 3. See results:
# tensorboard --logdir ~/logdir

# System
# FROM pytorch/pytorch:2.0.1-cuda11.7-cudnn8-runtime
FROM nvidia/cudagl:11.4.1-devel-ubuntu20.04
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/San_Francisco
ENV PYTHONUNBUFFERED 1
ENV PIP_DISABLE_PIP_VERSION_CHECK 1
ENV PIP_NO_CACHE_DIR 1
RUN apt-get update && apt-get install -y \
    vim libglew2.1 libgl1-mesa-glx libosmesa6 \
    wget unrar cmake g++ libgl1-mesa-dev \
    libx11-6 openjdk-8-jdk x11-xserver-utils xvfb \
    && apt-get clean

# Install python3.10 and pip
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.10 python3.10-dev python3.10-distutils && \
    apt-get install -y python3-pip && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1

RUN apt update && apt install -y curl
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10

# Envs
ENV NUMBA_CACHE_DIR=/tmp

# dmc setup
RUN pip3 install tensorboard
RUN pip3 install gym==0.19.0
RUN pip3 install mujoco==2.3.5
RUN pip3 install dm_control==1.0.9
RUN pip3 install moviepy

# crafter setup
RUN pip3 install crafter

RUN pip3 install numpy==1.23.0

# Install pytorch 
RUN pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

RUN pip3 install pybullet scipy gymnasium yamldataclassconfig nptyping==1.4.4 pettingzoo==1.22.3
RUN apt-get update && apt-get install -y libsm6 libxext6 libxrender-dev
RUN pip3 install opencv-python
COPY /racecar_gym/ /home/racecar_gym/
RUN cd /home/racecar_gym/ && pip3 install -e . --no-deps

RUN rm -r /usr/bin/python3 && ln -s /usr/bin/python3.8 /usr/bin/python3
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.8

# Install ROS 2 Humble
#####################################
# enable sudo commands
RUN apt-get update && apt-get install -y sudo
RUN apt-get install python3-apt -y
# RUN sudo apt install software-properties-common && sudo add-apt-repository universe
# RUN sudo apt update && sudo apt install curl -y
RUN sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN sudo apt update && sudo apt install -y \
        python3-flake8-docstrings \
        python3-pip \
        python3-pytest-cov \
        ros-dev-tools

RUN python3 -m pip install -U \
        flake8-blind-except \
        flake8-builtins \
        flake8-class-newline \
        flake8-comprehensions \
        flake8-deprecated \
        flake8-import-order \
        flake8-quotes \
        "pytest>=5.3" \
        pytest-repeat \
        pytest-rerunfailures

RUN mkdir -p ~/ros2_humble/src && cd ~/ros2_humble && \
        vcs import --input https://raw.githubusercontent.com/ros2/ros2/humble/ros2.repos src

RUN sudo apt -y upgrade && sudo rosdep init && rosdep update
RUN cd ~/ros2_humble && rosdep install --from-paths src --ignore-src -y --skip-keys "fastcdr rti-connext-dds-6.0.1 urdfdom_headers"

RUN cd ~/ros2_humble/ && colcon build --symlink-install

# Allow sourcing
RUN rm /bin/sh && ln -s /bin/bash /bin/sh 

RUN echo "source ~/ros2_humble/install/setup.bash" >> ~/.bashrc
#######################################


# # Install rospkg in conda environment
# RUN pip3 install rospkg

# # Set python3.8 as default (for roscore to work)
# RUN rm -r /usr/bin/python3 && ln -s /usr/bin/python3.8 /usr/bin/python3

# workdir /home/dreamerv3
WORKDIR /home/dreamerv3